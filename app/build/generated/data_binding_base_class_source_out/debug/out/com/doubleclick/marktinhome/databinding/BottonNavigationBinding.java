// Generated by view binder compiler. Do not edit!
package com.doubleclick.marktinhome.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SearchView;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.doubleclick.marktinhome.R;
import com.doubleclick.marktinhome.Views.SmoothButtom.SmoothBottomBar;
import de.hdodenhof.circleimageview.CircleImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class BottonNavigationBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final SmoothBottomBar bottomBar;

  @NonNull
  public final CircleImageView myImage;

  @NonNull
  public final ImageView openDrawer;

  @NonNull
  public final SearchView search;

  @NonNull
  public final Toolbar toolbar;

  private BottonNavigationBinding(@NonNull ConstraintLayout rootView,
      @NonNull SmoothBottomBar bottomBar, @NonNull CircleImageView myImage,
      @NonNull ImageView openDrawer, @NonNull SearchView search, @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.bottomBar = bottomBar;
    this.myImage = myImage;
    this.openDrawer = openDrawer;
    this.search = search;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static BottonNavigationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static BottonNavigationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.botton_navigation, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static BottonNavigationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottomBar;
      SmoothBottomBar bottomBar = ViewBindings.findChildViewById(rootView, id);
      if (bottomBar == null) {
        break missingId;
      }

      id = R.id.myImage;
      CircleImageView myImage = ViewBindings.findChildViewById(rootView, id);
      if (myImage == null) {
        break missingId;
      }

      id = R.id.openDrawer;
      ImageView openDrawer = ViewBindings.findChildViewById(rootView, id);
      if (openDrawer == null) {
        break missingId;
      }

      id = R.id.search;
      SearchView search = ViewBindings.findChildViewById(rootView, id);
      if (search == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new BottonNavigationBinding((ConstraintLayout) rootView, bottomBar, myImage,
          openDrawer, search, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
